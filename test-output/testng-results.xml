<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="1" total="13" passed="11" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-08-13T18:35:44 IST" name="Suite" finished-at="2022-08-13T18:35:44 IST" duration-ms="139">
    <groups>
      <group name="smoke">
        <method signature="Class4.WebloginHomeLoan()[pri:0, instance:udemyPractice.Class4@5e82df6a]" name="WebloginHomeLoan" class="udemyPractice.Class4"/>
        <method signature="Class1.demo()[pri:0, instance:udemyPractice.Class1@7e0b85f9]" name="demo" class="udemyPractice.Class1"/>
        <method signature="Class2.demo()[pri:0, instance:udemyPractice.Class2@31d7b7bf]" name="demo" class="udemyPractice.Class2"/>
        <method signature="Class3.ApiloginCarLoan()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" name="ApiloginCarLoan" class="udemyPractice.Class3"/>
      </group> <!-- smoke -->
    </groups>
    <test started-at="2022-08-13T18:35:44 IST" name="Loan" finished-at="2022-08-13T18:35:44 IST" duration-ms="139">
      <class name="udemyPractice.Class4">
        <test-method is-config="true" signature="Suite()[pri:0, instance:udemyPractice.Class4@5e82df6a]" started-at="2022-08-13T18:35:44 IST" name="Suite" finished-at="2022-08-13T18:35:44 IST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Suite -->
        <test-method signature="MobileloginHomeLoan()[pri:0, instance:udemyPractice.Class4@5e82df6a]" started-at="2022-08-13T18:35:44 IST" name="MobileloginHomeLoan" finished-at="2022-08-13T18:35:44 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileloginHomeLoan -->
        <test-method signature="WebloginHomeLoan()[pri:0, instance:udemyPractice.Class4@5e82df6a]" started-at="2022-08-13T18:35:44 IST" name="WebloginHomeLoan" finished-at="2022-08-13T18:35:44 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebloginHomeLoan -->
        <test-method signature="ApiloginHomeLoan()[pri:0, instance:udemyPractice.Class4@5e82df6a]" started-at="2022-08-13T18:35:44 IST" name="ApiloginHomeLoan" finished-at="2022-08-13T18:35:44 IST" depends-on-methods="udemyPractice.Class4.MobileloginHomeLoan, udemyPractice.Class4.WebloginHomeLoan" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ApiloginHomeLoan -->
      </class> <!-- udemyPractice.Class4 -->
      <class name="udemyPractice.Class3">
        <test-method is-config="true" signature="Before()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="Before" finished-at="2022-08-13T18:35:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Before -->
        <test-method signature="ApiloginCarLoan()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="ApiloginCarLoan" finished-at="2022-08-13T18:35:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ApiloginCarLoan -->
        <test-method is-config="true" signature="After()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="After" finished-at="2022-08-13T18:35:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- After -->
        <test-method is-config="true" signature="Before()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="Before" finished-at="2022-08-13T18:35:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Before -->
        <test-method signature="MobileSignupCarLoan()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="MobileSignupCarLoan" finished-at="2022-08-13T18:35:44 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileSignupCarLoan -->
        <test-method is-config="true" signature="After()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="After" finished-at="2022-08-13T18:35:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- After -->
        <test-method signature="MobileloginCarLoan()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="MobileloginCarLoan" finished-at="2022-08-13T18:35:44 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileloginCarLoan -->
        <test-method is-config="true" signature="Before()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="Before" finished-at="2022-08-13T18:35:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Before -->
        <test-method is-config="true" signature="After()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="After" finished-at="2022-08-13T18:35:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- After -->
        <test-method is-config="true" signature="Before()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="Before" finished-at="2022-08-13T18:35:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Before -->
        <test-method signature="MobilelogoutCarLoan(java.lang.String,java.lang.String)[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="MobilelogoutCarLoan" data-provider="getData" finished-at="2022-08-13T18:35:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[firstUsername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[firstPassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobilelogoutCarLoan -->
        <test-method is-config="true" signature="After()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="After" finished-at="2022-08-13T18:35:44 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- After -->
        <test-method is-config="true" signature="Before()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="Before" finished-at="2022-08-13T18:35:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Before -->
        <test-method signature="MobilelogoutCarLoan(java.lang.String,java.lang.String)[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="MobilelogoutCarLoan" data-provider="getData" finished-at="2022-08-13T18:35:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[SecondUsername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[SecondPassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobilelogoutCarLoan -->
        <test-method is-config="true" signature="Before()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="Before" finished-at="2022-08-13T18:35:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Before -->
        <test-method is-config="true" signature="After()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="After" finished-at="2022-08-13T18:35:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- After -->
        <test-method signature="MobilelogoutCarLoan(java.lang.String,java.lang.String)[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="MobilelogoutCarLoan" data-provider="getData" finished-at="2022-08-13T18:35:44 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ThirdUsername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ThirdPassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobilelogoutCarLoan -->
        <test-method is-config="true" signature="After()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="After" finished-at="2022-08-13T18:35:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- After -->
        <test-method signature="WebloginCarLoan()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="WebloginCarLoan" finished-at="2022-08-13T18:35:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebloginCarLoan -->
        <test-method is-config="true" signature="Before()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="Before" finished-at="2022-08-13T18:35:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Before -->
        <test-method is-config="true" signature="After()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="After" finished-at="2022-08-13T18:35:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- After -->
        <test-method is-config="true" signature="Last()[pri:0, instance:udemyPractice.Class3@1ddf84b8]" started-at="2022-08-13T18:35:44 IST" name="Last" finished-at="2022-08-13T18:35:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Last -->
      </class> <!-- udemyPractice.Class3 -->
      <class name="udemyPractice.Class2">
        <test-method is-config="true" signature="Beforeclass()[pri:0, instance:udemyPractice.Class2@31d7b7bf]" started-at="2022-08-13T18:35:44 IST" name="Beforeclass" finished-at="2022-08-13T18:35:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Beforeclass -->
        <test-method signature="demo()[pri:0, instance:udemyPractice.Class2@31d7b7bf]" started-at="2022-08-13T18:35:44 IST" name="demo" finished-at="2022-08-13T18:35:44 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- demo -->
        <test-method is-config="true" signature="Afterclass()[pri:0, instance:udemyPractice.Class2@31d7b7bf]" started-at="2022-08-13T18:35:44 IST" name="Afterclass" finished-at="2022-08-13T18:35:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Afterclass -->
      </class> <!-- udemyPractice.Class2 -->
      <class name="udemyPractice.Class1">
        <test-method is-config="true" signature="Last()[pri:0, instance:udemyPractice.Class1@7e0b85f9]" started-at="2022-08-13T18:35:44 IST" name="Last" finished-at="2022-08-13T18:35:44 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Last -->
        <test-method signature="demo()[pri:0, instance:udemyPractice.Class1@7e0b85f9]" started-at="2022-08-13T18:35:44 IST" name="demo" finished-at="2022-08-13T18:35:44 IST" duration-ms="19" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at udemyPractice.Class1.demo(Class1.java:20)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- demo -->
        <test-method is-config="true" signature="Suite()[pri:0, instance:udemyPractice.Class1@7e0b85f9]" started-at="2022-08-13T18:35:44 IST" name="Suite" finished-at="2022-08-13T18:35:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Suite -->
      </class> <!-- udemyPractice.Class1 -->
    </test> <!-- Loan -->
  </suite> <!-- Suite -->
</testng-results>
